# -*- coding: utf-8 -*-
"""Task 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WLeKCobyu9_jqNeUMdXrcu2eKlgPrOsf
"""



"""# Task
Implement a simple text generation algorithm using Markov chains in Python.

## Data preparation

### Subtask:
Load the text data and preprocess it by removing punctuation and converting it to lowercase.

**Reasoning**:
The first step is to define the raw text data and then preprocess it by removing punctuation and converting it to lowercase as per the instructions.
"""

import string

raw_text = """This is a sample text for demonstrating a simple Markov chain.
Markov chains are mathematical systems that transition from one state to another based on
probabilities. They are memoryless, meaning the next state depends only on the current state.
This makes them suitable for generating text that follows a similar pattern to the training data.
Let's see how this simple example works."""

# Remove punctuation
cleaned_text = raw_text.translate(str.maketrans('', '', string.punctuation))

# Convert to lowercase
cleaned_text = cleaned_text.lower()

print("Original Text:")
print(raw_text)
print("\nCleaned Text:")
print(cleaned_text)

"""## Build markov chain model

### Subtask:
Create a dictionary to store the transitions between characters or words.

**Reasoning**:
Initialize an empty dictionary and iterate through the cleaned text to build the Markov chain dictionary by storing character transitions.
"""

markov_chain = {}

for i in range(len(cleaned_text) - 1):
    current_char = cleaned_text[i]
    next_char = cleaned_text[i+1]

    if current_char not in markov_chain:
        markov_chain[current_char] = []

    markov_chain[current_char].append(next_char)

print("Markov Chain (first 10 entries):")
for char, transitions in list(markov_chain.items())[:10]:
    print(f"'{char}': {transitions}")

"""## Generate text

### Subtask:
Use the Markov chain model to generate new text.

**Reasoning**:
Implement the text generation using the built Markov chain and print the result.
"""

import random

generated_text = random.choice(list(markov_chain.keys()))

for _ in range(200):
    last_char = generated_text[-1]
    if last_char in markov_chain:
        next_char = random.choice(markov_chain[last_char])
        generated_text += next_char
    else:
        break

print("Generated Text:")
print(generated_text)

"""## Summary:

### Data Analysis Key Findings

*   The initial raw text was successfully preprocessed by removing punctuation and converting all characters to lowercase.
*   A Markov chain model was constructed as a dictionary, where keys represent characters and values are lists of characters that follow the key character in the cleaned text.
*   Text generation was performed by starting with a random character and iteratively selecting the next character based on the observed transitions in the Markov chain, for a total of 200 characters.

### Insights or Next Steps

*   The current implementation is character-based; a potential next step could be to build a word-based Markov chain for more coherent text generation.
*   To improve the quality and variety of generated text, the model could be trained on a larger and more diverse corpus of text data.

"""